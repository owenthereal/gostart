openapi: 3.0.1
info:
  title: User API
  description: Public documentation for user API
  contact:
    email: o@owenou.com
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /users:
    get:
      summary: Find a user
      operationId: findUsers
      parameters:
        - name: emails
          in: query
          description: emails to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: bad request
          content: {}
        404:
          description: users not found
          content: {}
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a user
      operationId: createUser
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{uuid}:
    get:
      summary: Get a user by id
      operationId: getUserById
      parameters:
        - name: uuid
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Deletes a user by ID
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      parameters:
        - name: uuid
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: user deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    NewUser:
      required:
        - email
      properties:
        email:
          type: string
          format: email
    User:
      required:
        - id
        - email
      properties:
        id:
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
        email:
          type: string
          format: email
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
security:
  - basicAuth: []
